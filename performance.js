// Generated by CoffeeScript 2.3.2
var getROI, https, loadData;

import {
  Betoken
} from "./betokenjs/betoken-obj.js";

import {
  stats,
  timer
} from "./betokenjs/helpers.js";

import {
  loadMetadata,
  loadFundData,
  loadTokenPrices,
  loadStats
} from "./betokenjs/data-controller.js";

https = require("https");

loadData = async() => {
  // init betoken object
  window.betoken = new Betoken();
  await window.betoken.init();
  // load stats data from betoken
  return (await loadMetadata.then(loadFundData).then(loadTokenPrices).then(loadStats));
};

getROI = async() => {
  var apiStr, betokenROI, blxEndPrice, blxROI, blxStartPrice, endTimestamp, i, now, phase, phaseLengths, phaseStart, prices, rawROIs, startTimestamp, timestamp;
  // get betoken ROI and time range
  phase = timer.phase();
  rawROIs = stats.raw_roi_data();
  now = Math.floor(new Date().getTime() / 1000);
  phaseStart = timer.phase_start_time();
  phaseLengths = timer.phase_lengths();
  betokenROI = 0;
  blxROI = 0;
  startTimestamp = 0;
  endTimestamp = 0;
  switch (phase) {
    case 0:
      // invest & withdraw phase
      // use last cycle's data
      betokenROI = rawROIs[rawROIs.length - 1][1];
      endTimestamp = phaseStart - phaseLengths[2];
      startTimestamp = endTimestamp - phaseLengths[1];
      break;
    case 1:
      // manage phase
      // use current data
      betokenROI = stats.cycle_roi();
      startTimestamp = phaseStart;
      endTimestamp = now;
      break;
    case 2:
      // redeem commission phase
      // use data from manage phase
      betokenROI = stats.cycle_roi();
      startTimestamp = phaseStart - phaseLengths[1];
      endTimestamp = phaseStart;
  }
  // get BLX ROI in the given time range
  apiStr = "https://api.iconomi.net/v1/daa/BLX/pricehistory";
  prices = ((await (new Promise(function(resolve, reject) {
    return https.get(apiStr, function(res) {
      var rawData;
      rawData = "";
      res.on("data", function(chunk) {
        return rawData += chunk;
      });
      return res.on("end", function() {
        var parsedData;
        parsedData = JSON.parse(rawData);
        return resolve(parsedData);
      });
    }).on("error", reject);
  })))).values;
  // find price near start timestamp
  blxStartPrice = 0.0;
  i = 0;
  while (i < prices.length) {
    timestamp = prices[i].x;
    if (timestamp >= startTimestamp) {
      blxStartPrice = prices[i].y;
    }
    i += 1;
  }
  // find price near end timestamp
  blxEndPrice = 0.0;
  i = prices.length - 1;
  while (i >= 0) {
    timestamp = prices[i].x;
    if (timestamp <= startTimestamp) {
      blxEndPrice = prices[i].y;
    }
    i -= 1;
  }
  blxROI = (blxEndPrice - blxStartPrice) / blxStartPrice;
  return [betokenROI, blxROI, startTimestamp, endTimestamp];
};
